#!/usr/bin/env python3
# coding: utf-8
#
#  This file is part of Autotropos software
#
#  Copyright (c) 2017 - Institut Curie
#
#  File author(s):
#      Dimitri Desvillechabrol <dimitri.desvillechabrol@curie.fr>,
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
##############################################################################
""" Fastq basic stats

A simple tool to calculate basic stats of a sample.
"""
import json
import multiprocessing as mp
from os import path

import click

from rawqc import fastq
from rawqc import logger


@click.command(
    context_settings={'help_option_names': ['-h', '--help']}
)
@click.option(
    '-1', '--read1',
    type=click.Path(exists=True),
    metavar='FILE1',
    nargs=1,
    required=True,
    help="The first read fastq file (R1) or a single-end read file."
)
@click.option(
    '-2', '--read2',
    type=click.Path(exists=True),
    metavar='FILE2',
    nargs=1,
    default=None,
    help="The second read fastq file (R2)."
)
@click.option(
    '-p', '--prefix',
    type=click.Path(),
    metavar='PREFIX',
    nargs=1,
    help="Prefix output JSON file.('PREFIX_basicmet.json')"
)
@click.option(
    '-i', '--id', 'sample_id',
    type=str,
    metavar='ID',
    nargs=1,
    default=None,
    help="ID of the sample."
)
@click.option(
    '-s', '--sample-name', 'sample_name',
    type=str,
    metavar='NAME',
    nargs=1,
    default=None,
    help="Name of the sample"
)
@click.option(
    '-j', '--json', 'jsonfile',
    type=click.Path(exists=True),
    metavar='JSON',
    nargs=1,
    help="JSON file generated by Autotropos with option --json *.json"
)
def main(read1, read2, prefix, sample_id, sample_name, jsonfile):
    """ Compute basic stats of FastQ paired-end or single-end.
    It returns a JSON file with basic stats of your sample like mean length or
    gc content.
    """
    logger.info("Compute the basic metrics of your FastQ file(s).")
    # if there are read2 we need to use multiprocessing
    if read2:
        # inits values
        mean_value = ('mean_length', 'gc_content')
        sum_value = ('total_read', 'total_base')

        # creates the pool to multiprocess
        pool = mp.Pool(processes=2)
        r1, r2 = pool.map(get_basic_stats, (read1, read2))

        # concatenates information to create stats file
        stats = {k: r1[k] + r2[k] for k in sum_value}
        stats = dict(stats, **{k: (r1[k] + r2[k]) / 2 for k in mean_value})
        stats['R1-Q20'] = r1['q20']
        stats['R2-Q20'] = r2['q20']
    else:
        r1 = fastq.BasicStats(read1).get_basic_metrics()
        r1['R1-Q20'] = r1.pop('q20')
        r1['R2-Q20'] = 'None'
        stats = r1
    stats['nb_cluster'] = r1['total_read']
    # add sample ID and name
    stats['ID'] = sample_id if sample_id else path.basename(read1)
    stats['sample_name'] = sample_name if sample_name else stats['ID']

    # add atropos metrics
    try:
        with open(jsonfile, 'r') as fp:
            stats = dict(stats, **json.load(fp))
    except json.decoder.JSONDecodeError:
        pass
    except TypeError:
        pass

    # sets the output name with extension recognised by MultiQC
    if prefix:
        output = prefix + '_basicmet.json'
    else:
        output = stats['ID'] + '_basicmet.json'

    # write the json file
    logger.info('Basic metrics complete !')
    stats['basic_metrics'] = True
    with open(output, 'w') as fl:
        print(json.dumps(stats), file=fl)


def get_basic_stats(filename):
    """ Wrapp `fastq.BasicStats.get_basic_metrics` in a function for the
    multiprocessing.
    """
    return fastq.BasicStats(filename).get_basic_metrics()
