#! /bin/bash

#- ---------------------------------------------------------------------------
#-    Copyright (C) 2017 - Institut Curie
#-
#- This file is the pipeline Raw-QC.
#- Version: v1.0
#-
#- File author(s):
#-     Dimitri Desvillechabrol <dimitri.desvillechabrol@curie.fr>
#- 
#- Distributed under the terms of the CeCILL-B license.
#- The full license is in the LICENSE file, distributed with this
#- software.
#- ---------------------------------------------------------------------------

## Usage: raw-qc.sh [OPTIONS] -c <json> -1 <file> -o <dir>
##
## Raw-qc is a pipeline to check the quality of the input FastQ file(s).
##
## Required parameters:
##  -1, --read1 FILE1     The first read FastQ file (R1) or a single-end read
##                        file.  [required if no --sample-plan]
##  -s, --sample-plan FILE          
##                        Sample plan with all sample to run in cloud.
##                        NAMESPACE is the namespace you want to use for
##                        parallele. [required if no --read1]
##  -c, --config-file JSON
##                        The JSON config file of the pipeline.
##  -o, --output-dir OUTDIR
##                        The directory where all the analysis are done.
##
## Options:
##  -2, --read2 FILE2     The second read FastQ file (R2).
##  -p, --prefix STRING   Prefix name of output files.
##                        (ie OUTDIR/PREFIX/task/PREFIX.extension)
##  --cluster             Run the pipeline on a cluster with Torque as
##                        scheduler.
##  -w, --latency-wait SECONDS      
##                        Wait SECONDS between each cluster submission.
##  --debug               Debug mode if you have any problem.
##  -h, --help            Show this message and exit.
##  -l, --license         Show the license and exit.
##

SOURCE="${BASH_SOURCE[0]}"

# get real path of the script through on degree of symbolic link
SRC_PATH=$(realpath -P "${SOURCE}")
SRC_PATH=${SRC_PATH%/*}

# help, license and latency
HELP=$(grep "^## " "${SOURCE}" | cut -c 4-)
LICENSE=$(grep "^#- " "${SOURCE}" | cut -c 4-)
LATENCY=0.5

if [[ ${#@} -lt 1 ]];then
    echo "${HELP}"
    exit 1
fi

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
      "--read1") set -- "$@" "-1";;
      "--read2") set -- "$@" "-2";;
      "--prefix") set -- "$@" "-p";;
      "--output-dir") set -- "$@" "-o";;
      "--config-file") set -- "$@" "-c";;
      "--sample-plan") set -- "$@" "-s";;
      "--latency-wait") set -- "$@" "-w";;
      "--help") set -- "$@" "-h";;
      "--license") set -- "$@" "-l";;
      *) set -- "$@" "$arg" ;;
  esac
done

# Parse arguments
while getopts "1:2:p:o:c:s:w:hl-:" optchar; do
    case $optchar in
        -)
            case "${OPTARG}" in
                cluster)
                    CLUSTER="True"
                    ;;
                get-config)
                    cp -i "${SRC_PATH%/}/config/rawqc_config.json" $(pwd)
                    echo "The rawqc_config.json file is copied."
                    exit 0
                    ;;
                debug)
                    DEBUG="True"
                    ;;
                *)
                    echo "Invalid option: --${OPTARG}" >&2
                    echo "${HELP}"
                    exit 1
                    ;;
            esac;;
        1)
            READ1=$(realpath ${OPTARG})
            ;;
        2)
            READ2=$(realpath ${OPTARG})
            ;;
        p)
            PREFIX=${OPTARG}
            ;;
	    o)
            OUTDIR=$(realpath ${OPTARG})
            OUTDIR="${OUTDIR%/}/"
            ;;
	    c)
            CONFIG=$(realpath ${OPTARG})
            ;;
        s)
            PLAN=$(realpath ${OPTARG})
            ;;
        w)
            if [[ ${OPTARG} =~ ^[0-9]+\.[0-9]+$ ]]; then
                LATENCY=${OPTARG}
            else
                echo "Invalid parameter for --latency-wait: it must be a FLOAT" >&2
                exit 1
            fi
            ;;
	    h)
            echo "${HELP}"
            exit 1
            ;;
        l)
            echo "${LICENSE}"
            exit 1
            ;;
	    \?)
	        echo "Invalid option: -${OPTARG}" >&2
	        echo "${HELP}"
	        exit 1
	        ;;
	    :)
	        echo "Option -${OPTARG} requires an argument." >&2
	        echo "${HELP}"
	        exit 1
	        ;;
    esac
done

# Check if output directory and JSON config are provided
if [[ -z $OUTDIR && -z $CONFIG ]];then
    echo "${HELP}"
    exit 1
fi

# Set paths
SCRIPTS_PATH="${SRC_PATH%/}/scripts/"
CWD=$(pwd)

# Load utils function
. ${SCRIPTS_PATH}utils-bash.sh
create_directory "${OUTDIR}"

# Check if a sample plan or a FASTQ file is provided
if [[ -z $PLAN ]];then
    if [[ -n $READ1 ]];then
        # Create a temporary sample plan
        if [[ -z $PREFIX ]];then
            PREFIX=$(basename ${READ1%.fastq*})
        fi
        PLAN=$(create_sample_plan "${READ1} ${READ2}" "${PREFIX}")
    else
        echo "Missing input." >&2
        echo "${HELP}"
        exit 1
    fi
fi

process_qc(){
    local sample_array
    local cmd
    local line=$1

    IFS=',' read -r -a sample_array <<< "$line"
    local sample_id=${sample_array[0]}
    local raw_fastq=$(printf '%s %s' "${sample_array[@]:2:2}")
    local outdir="${OUTDIR}${sample_id}"
    local log_path="${outdir}/logs/${sample_id}"

    # Fastqc
    local raw_outdir="${outdir}/fastqc_raw/"
    cmd=$(
        get_command_line --tool "${SCRIPTS_PATH}fastqc-bash.sh" \
                         --input "${raw_fastq}" \
                         --output ${raw_outdir} \
                         --log-file "${log_path}.raw_fastqc.log"
    )
    local pid_raw_fastqc=$(run_bash "${cmd}" ${CONFIG})
    
    # atropos
    
    # outputs are decomposed to ease connection between jobs
    local atropos_prefix="${outdir}/atropos/${sample_id}"
    local atropos_fastq_output="${atropos_prefix}.R1.fastq.gz"
    if [[ -n "${sample_array[3]}" ]];then
        atropos_fastq_output=$(
            printf '%s %s' "${atropos_fastq_output}" \
                           "${atropos_prefix}.R2.fastq.gz"
        )
    fi
    local atropos_output=$(
        printf '%s %s' "${atropos_fastq_output}" \
                          "${atropos_prefix}"
    )

    cmd=$(
        get_command_line --tool ${SCRIPTS_PATH}"rawqc_atropos-bash.sh" \
                         --input "${raw_fastq}" \
                         --output "${atropos_output}" \
                         --log-file "${log_path}.rawqc_atropos.log"
    )
    local pid_atropos=$(run_bash "${cmd}" ${CONFIG})
 
    # Basic metrics
    local basic_metrics_input=$(
        printf '%s %s' "${line}" \
                       "${atropos_prefix}.trim.json"
    )
    local basic_metrics_output="${outdir}/basic_metrics/${sample_id}"
    cmd=$(
        get_command_line --tool ${SCRIPTS_PATH}"rawqc_basic_metrics-bash.sh" \
                         --input "${basic_metrics_input}" \
                         --output "${basic_metrics_output}" \
                         --log-file "${log_path}.rawqc_basic_metrics.log"
    )
    local pid_basic_metrics=$(run_bash "${cmd}" ${CONFIG} ${pid_atropos})
    
    # Fastqc
    local trim_outdir="${outdir}/fastqc_trim/"
    cmd=$(
        get_command_line --tool ${SCRIPTS_PATH}"fastqc-bash.sh" \
                         --input "${atropos_fastq_output}" \
                         --output "${trim_outdir}" \
                         --log-file "${log_path}.trim_fastqc.log"
    )
    local pid_trim_fastqc=$(run_bash "${cmd}" ${CONFIG} "${pid_atropos}")
    echo "${pid_basic_metrics}:${pid_trim_fastqc}"
}

qc_pid=()
while read line; do
    echo "Run the sample ${line%%,*}"
    qc_pid+=($(process_qc "${line}"))
done < ${PLAN}

# join pid
qc_pid=$(join_by ":" "${qc_pid[@]}")
# MultiQC
multiqc_input=$(
    printf '%s %s %s' "${OUTDIR}*/basic_metrics/*.json" \
               "${OUTDIR}*/fastqc_trim/*.zip" \
               "${OUTDIR}*/atropos/*.trim.json"
)
multiqc_outdir="${OUTDIR}multiqc/"
cmd=$(
    get_command_line --tool ${SCRIPTS_PATH}"multiqc-bash.sh" \
                     --input "${multiqc_input}" \
                     --output "${multiqc_outdir}" \
                     --log-file "${OUTDIR}common_logs/multiqc.log"
)
echo ${cmd}
pid_multiqc=$(run_bash "${cmd}" ${CONFIG} ${qc_pid})
