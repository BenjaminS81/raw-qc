/*
 * -------------------------------------------------
 *  nf-core/mypipeline Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  reads = null
  singleEnd = false
  outdir = './results'
  trimtool = 'trimgalore'
  adapter = 'auto' 
 
  // Defaults
  readPaths = null
  samplePlan = null  

  // Boilerplate options
  name = false
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  metadata = "$baseDir/assets/metadata.tsv"
  email = false
  plaintext_email = false
  help = false
  maxMultiqcEmailFileSize = 25.MB
  tracedir = "${params.outdir}/pipeline_info"

  skip_fastqc_raw = false
  skip_trimming =  false
  skip_fastqc_trim = false
  skip_multiqc = false

  //Adapters
  truseq_r1 = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA"
  truseq_r2 = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"
  smallrna_r1 = "TGGAATTCTCGGGTGCCAAGG"
  nextera_r1 = "CTGTCTCTTATACACATCT"
  nextera_r2 = "CTGTCTCTTATACACATCT"

  // Custom trimming options
  qualtrim = 0
  ntrim = false
  two_colour = false 
  minlen = 10
  pico = false
  polyA = false
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Profiles
profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/mypipeline_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/mypipeline_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/mypipeline_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/mypipeline_dag.svg"
}

manifest {
  name = 'rawqc-nextflow'
  author = 'me'
  homePage = 'https://gitlab.curie.fr/data-analysis/raw-qc/'
  description = 'rawqc'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
